buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:6.0.0-beta.3"
//        classpath "name.remal:gradle-plugins:1.0.211"
        classpath("io.beekeeper.gradle:beekeeper-dependency-updates-plugin:0.15.0")
//        classpath("com.github.johnrengelman:shadow:8.1.1")
    }
}

apply plugin: "com.github.spotbugs"
apply plugin: 'java-library'
apply plugin: 'jacoco'

apply plugin: 'checkstyle'
//apply plugin: 'distribution'
//apply plugin: 'maven'
//apply plugin: 'groovy'
//apply plugin: 'idea'

// check the new version of dependencies
// USE: ./gradlew cDU
// SEE: https://www.jianshu.com/p/a72569b0fdb7
//apply plugin: 'name.remal.check-dependency-updates'
apply plugin: 'io.beekeeper.gradle.plugins.dependency-updates'
//apply plugin: "com.github.johnrengelman.shadow"
//

/*
plugins {
  id "name.remal.check-dependency-updates" version "1.0.211"
}
*/



version = '0.2'

configurations {
    provided
//    integrationTestCompile.extendsFrom testCompile
//    integrationTestRuntime.extendsFrom testRuntime

//    all*.exclude group:'org.slf4j', module:'slf4j-nop'
//    all*.exclude group:'org.slf4j', module:'slf4j-jdk14'

    //no effect
//    testImplementation.exclude group:'org.slf4j', module:'slf4j-nop'
//    testImplementation.exclude group:'org.slf4j', module:'slf4j-jdk14'


}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }


}

repositories {
    maven {
        url "https://www.jitpack.io"
    }
    mavenCentral()
}

dependencies {
    //no compile,because slf4j-api is included in OmegaT ifself
    compileOnly 'org.slf4j:slf4j-api:1.7.25'

    compileOnly 'org.omegat:omegat:6.0.0'
    compileOnly 'commons-io:commons-io:2.7'
    compileOnly 'commons-lang:commons-lang:2.6'
    // no need.We can use slf4j-jdk14 which is included by "org.omegat:omegat:4.3.0"
//    provided 'org.slf4j:slf4j-nop:1.7.21'
    testImplementation 'junit:junit:4.13.1'

    //testCompile 'xmlunit:xmlunit:1.6'
    //testCompile 'org.madlonkay.supertmxmerge:supertmxmerge:2.0.1'

    //testCompile 'org.apache.logging.log4j:log4j-api:2.13.3'
    //testCompile 'org.apache.logging.log4j:log4j-core:2.13.3'
//    testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'

    // https://mvnrepository.com/artifact/cn.hutool/hutool-json
    implementation group: 'cn.hutool', name: 'hutool-json', version: '5.8.22'
    // https://mvnrepository.com/artifact/cn.hutool/hutool-http
    implementation group: 'cn.hutool', name: "hutool-http", version: '5.8.22'
    // https://mvnrepository.com/artifact/cn.hutool/hutool-crypto
    //compile group: 'cn.hutool', name: 'hutool-crypto', version: '5.4.0'

}



//test.useTestNG()

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
    options.release = 11
}

//always generate the jacocoTestReport or run the test task before generating the report explicitly.
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


// Build FatJar
//
// It is easy to install a 3rd-party OmegaT plugin which is
// a single jar file, because all user should do is just to put the jar
// file into plugins directory.

jar{
    // make gradle5 compatible
//    from files(sourceSets.main.output.classesDir)
//    from sourceSets.main.output.classesDirs
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)  } }
//            {
//        exclude 'META-INF/MANIFEST.MF'
//    }
    manifest {
        // plugin's main class name is defined in gradle.properties file.
        attributes("OmegaT-Plugins": pluginMainClass)
    }
    duplicatesStrategy "exclude"
}

//checkstyle
checkstyle {
    config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/google_checks.xml")
    ignoreFailures = true
    toolVersion = '10.12.3'
    // prevent checkstyle/findbugs on Test.
//    checkstyleTest.enabled = false
}
tasks.checkstyleMain.setGroup('Verification')


// Treat spotbugs  failure as warning
spotbugs {
    ignoreFailures = true
    showProgress = true
    jvmArgs = ['-Duser.language=en']
}
//tasks.withType(com.github.spotbugs.SpotBugsTask) {
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//    setGroup('Verification')
//}
// Example to configure HTML report
spotbugsMain {
    reports {
        html {
            required = true
            outputLocation =  layout.buildDirectory.file("reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// Force prevent checkstyle/findbugs on Test.
//
//task findbugsTest(overwrite: true) {
//    doLast {
//
//    }
//}


// Hack for IntelliJ IDEA
//idea {
//    module {
//        testSourceDirs += file('src/integration-test/java')
//    }
//}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

javadoc {
    classpath += configurations.provided
    options{
        encoding 'UTF-8'
//        charSet 'UTF-8'
    }
//    options.locale = 'en_US'
//    options.encoding = 'UTF-8'
//    options.charSet = 'UTF-8'
//    options.links 'http://docs.oracle.com/javase/17/docs/api'
}

//tasks.register('myJavadocs', Javadoc) {
//    source = sourceSets.main.allJava
//    classpath += configurations.provided
//    options.locale = 'en_US'
//    author true
//    options.addStringOption('encoding','UTF-8')
//    options.docletpath = configurations.jaxDoclet.files.asType(List)
//    options.encoding = 'UTF-8'
//    options.charSet = 'UTF-8'
//    options.links 'http://docs.oracle.com/javase/17/docs/api'
//}
/*
groovydoc {
    classpath += configurations.provided
}
*/

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}



